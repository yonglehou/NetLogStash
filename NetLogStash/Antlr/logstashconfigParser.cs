//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Logstashconfig.g4 by ANTLR 4.5.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.2")]
[System.CLSCompliant(false)]
public partial class LogstashconfigParser : Parser {
	public const int
		INPUT=1, FILTER=2, OUTPUT=3, LBRACE=4, RBRACE=5, LPAREN=6, RPAREN=7, LBRACKET=8, 
		RBRACKET=9, HASHROCKET=10, GT=11, GE=12, LT=13, LE=14, EQ=15, NEQ=16, 
		BANG=17, COMA=18, IN=19, NOT=20, MATCH=21, NOT_MATCH=22, AND=23, OR=24, 
		XOR=25, NAND=26, IF=27, ELSE=28, STRING=29, REGEX=30, DECIMAL=31, IDENTIFIER=32, 
		WS=33, COMMENT=34;
	public const int
		RULE_config = 0, RULE_stage_declaration = 1, RULE_stage_definition = 2, 
		RULE_plugin_declaration = 3, RULE_plugin_definition = 4, RULE_plugin_attribute = 5, 
		RULE_plugin_attribute_value = 6, RULE_stage_condition = 7, RULE_logical_expression = 8, 
		RULE_negative_expression = 9, RULE_compare_expression = 10, RULE_in_expression = 11, 
		RULE_match_expression = 12, RULE_rvalue = 13, RULE_fieldref = 14, RULE_fieldref_element = 15, 
		RULE_array = 16, RULE_array_element = 17, RULE_hash = 18, RULE_hash_element = 19;
	public static readonly string[] ruleNames = {
		"config", "stage_declaration", "stage_definition", "plugin_declaration", 
		"plugin_definition", "plugin_attribute", "plugin_attribute_value", "stage_condition", 
		"logical_expression", "negative_expression", "compare_expression", "in_expression", 
		"match_expression", "rvalue", "fieldref", "fieldref_element", "array", 
		"array_element", "hash", "hash_element"
	};

	private static readonly string[] _LiteralNames = {
		null, "'input'", "'filter'", "'output'", "'{'", "'}'", "'('", "')'", "'['", 
		"']'", "'=>'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'!'", "','", 
		"'in'", "'not'", "'=~'", "'!~'", "'and'", "'or'", "'xor'", "'nand'", "'if'", 
		"'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INPUT", "FILTER", "OUTPUT", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
		"LBRACKET", "RBRACKET", "HASHROCKET", "GT", "GE", "LT", "LE", "EQ", "NEQ", 
		"BANG", "COMA", "IN", "NOT", "MATCH", "NOT_MATCH", "AND", "OR", "XOR", 
		"NAND", "IF", "ELSE", "STRING", "REGEX", "DECIMAL", "IDENTIFIER", "WS", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Logstashconfig.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LogstashconfigParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ConfigContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LogstashconfigParser.Eof, 0); }
		public Stage_declarationContext[] stage_declaration() {
			return GetRuleContexts<Stage_declarationContext>();
		}
		public Stage_declarationContext stage_declaration(int i) {
			return GetRuleContext<Stage_declarationContext>(i);
		}
		public ConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigContext config() {
		ConfigContext _localctx = new ConfigContext(Context, State);
		EnterRule(_localctx, 0, RULE_config);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 40; stage_declaration();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INPUT) | (1L << FILTER) | (1L << OUTPUT))) != 0) );
			State = 45; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_declarationContext : ParserRuleContext {
		public Stage_definitionContext stage_definition() {
			return GetRuleContext<Stage_definitionContext>(0);
		}
		public ITerminalNode INPUT() { return GetToken(LogstashconfigParser.INPUT, 0); }
		public ITerminalNode FILTER() { return GetToken(LogstashconfigParser.FILTER, 0); }
		public ITerminalNode OUTPUT() { return GetToken(LogstashconfigParser.OUTPUT, 0); }
		public Stage_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterStage_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitStage_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_declarationContext stage_declaration() {
		Stage_declarationContext _localctx = new Stage_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_stage_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INPUT) | (1L << FILTER) | (1L << OUTPUT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 48; stage_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_definitionContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(LogstashconfigParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(LogstashconfigParser.RBRACE, 0); }
		public Plugin_declarationContext[] plugin_declaration() {
			return GetRuleContexts<Plugin_declarationContext>();
		}
		public Plugin_declarationContext plugin_declaration(int i) {
			return GetRuleContext<Plugin_declarationContext>(i);
		}
		public Stage_conditionContext[] stage_condition() {
			return GetRuleContexts<Stage_conditionContext>();
		}
		public Stage_conditionContext stage_condition(int i) {
			return GetRuleContext<Stage_conditionContext>(i);
		}
		public Stage_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterStage_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitStage_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_definitionContext stage_definition() {
		Stage_definitionContext _localctx = new Stage_definitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_stage_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(LBRACE);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==IF || _la==IDENTIFIER) {
				{
				State = 53;
				switch (TokenStream.La(1)) {
				case IDENTIFIER:
					{
					State = 51; plugin_declaration();
					}
					break;
				case IF:
					{
					State = 52; stage_condition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 58; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plugin_declarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LogstashconfigParser.IDENTIFIER, 0); }
		public Plugin_definitionContext plugin_definition() {
			return GetRuleContext<Plugin_definitionContext>(0);
		}
		public Plugin_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plugin_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterPlugin_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitPlugin_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlugin_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Plugin_declarationContext plugin_declaration() {
		Plugin_declarationContext _localctx = new Plugin_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_plugin_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(IDENTIFIER);
			State = 61; plugin_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plugin_definitionContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(LogstashconfigParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(LogstashconfigParser.RBRACE, 0); }
		public Plugin_attributeContext[] plugin_attribute() {
			return GetRuleContexts<Plugin_attributeContext>();
		}
		public Plugin_attributeContext plugin_attribute(int i) {
			return GetRuleContext<Plugin_attributeContext>(i);
		}
		public Plugin_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plugin_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterPlugin_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitPlugin_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlugin_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Plugin_definitionContext plugin_definition() {
		Plugin_definitionContext _localctx = new Plugin_definitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_plugin_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(LBRACE);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 64; plugin_attribute();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 70; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plugin_attributeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LogstashconfigParser.IDENTIFIER, 0); }
		public ITerminalNode HASHROCKET() { return GetToken(LogstashconfigParser.HASHROCKET, 0); }
		public Plugin_attribute_valueContext plugin_attribute_value() {
			return GetRuleContext<Plugin_attribute_valueContext>(0);
		}
		public Plugin_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plugin_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterPlugin_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitPlugin_attribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlugin_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Plugin_attributeContext plugin_attribute() {
		Plugin_attributeContext _localctx = new Plugin_attributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_plugin_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(IDENTIFIER);
			State = 73; Match(HASHROCKET);
			State = 74; plugin_attribute_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plugin_attribute_valueContext : ParserRuleContext {
		public Plugin_declarationContext plugin_declaration() {
			return GetRuleContext<Plugin_declarationContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(LogstashconfigParser.IDENTIFIER, 0); }
		public ITerminalNode STRING() { return GetToken(LogstashconfigParser.STRING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(LogstashconfigParser.DECIMAL, 0); }
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public HashContext hash() {
			return GetRuleContext<HashContext>(0);
		}
		public Plugin_attribute_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plugin_attribute_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterPlugin_attribute_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitPlugin_attribute_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlugin_attribute_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Plugin_attribute_valueContext plugin_attribute_value() {
		Plugin_attribute_valueContext _localctx = new Plugin_attribute_valueContext(Context, State);
		EnterRule(_localctx, 12, RULE_plugin_attribute_value);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76; plugin_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 78; Match(STRING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 79; Match(DECIMAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 80; array();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 81; hash();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_conditionContext : ParserRuleContext {
		public ITerminalNode[] IF() { return GetTokens(LogstashconfigParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(LogstashconfigParser.IF, i);
		}
		public Logical_expressionContext[] logical_expression() {
			return GetRuleContexts<Logical_expressionContext>();
		}
		public Logical_expressionContext logical_expression(int i) {
			return GetRuleContext<Logical_expressionContext>(i);
		}
		public Stage_definitionContext[] stage_definition() {
			return GetRuleContexts<Stage_definitionContext>();
		}
		public Stage_definitionContext stage_definition(int i) {
			return GetRuleContext<Stage_definitionContext>(i);
		}
		public ITerminalNode[] ELSE() { return GetTokens(LogstashconfigParser.ELSE); }
		public ITerminalNode ELSE(int i) {
			return GetToken(LogstashconfigParser.ELSE, i);
		}
		public Stage_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterStage_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitStage_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_conditionContext stage_condition() {
		Stage_conditionContext _localctx = new Stage_conditionContext(Context, State);
		EnterRule(_localctx, 14, RULE_stage_condition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(IF);
			State = 85; logical_expression(0);
			State = 86; stage_definition();
			State = 94;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 87; Match(ELSE);
					State = 88; Match(IF);
					State = 89; logical_expression(0);
					State = 90; stage_definition();
					}
					} 
				}
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 99;
			_la = TokenStream.La(1);
			if (_la==ELSE) {
				{
				State = 97; Match(ELSE);
				State = 98; stage_definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_expressionContext : ParserRuleContext {
		public Compare_expressionContext compare_expression() {
			return GetRuleContext<Compare_expressionContext>(0);
		}
		public In_expressionContext in_expression() {
			return GetRuleContext<In_expressionContext>(0);
		}
		public Match_expressionContext match_expression() {
			return GetRuleContext<Match_expressionContext>(0);
		}
		public Negative_expressionContext negative_expression() {
			return GetRuleContext<Negative_expressionContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(LogstashconfigParser.LPAREN, 0); }
		public Logical_expressionContext[] logical_expression() {
			return GetRuleContexts<Logical_expressionContext>();
		}
		public Logical_expressionContext logical_expression(int i) {
			return GetRuleContext<Logical_expressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(LogstashconfigParser.RPAREN, 0); }
		public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		public ITerminalNode AND() { return GetToken(LogstashconfigParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(LogstashconfigParser.OR, 0); }
		public ITerminalNode NAND() { return GetToken(LogstashconfigParser.NAND, 0); }
		public ITerminalNode XOR() { return GetToken(LogstashconfigParser.XOR, 0); }
		public Logical_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterLogical_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitLogical_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_expressionContext logical_expression() {
		return logical_expression(0);
	}

	private Logical_expressionContext logical_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_expressionContext _localctx = new Logical_expressionContext(Context, _parentState);
		Logical_expressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_logical_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 102; compare_expression();
				}
				break;
			case 2:
				{
				State = 103; in_expression();
				}
				break;
			case 3:
				{
				State = 104; match_expression();
				}
				break;
			case 4:
				{
				State = 105; negative_expression();
				}
				break;
			case 5:
				{
				State = 106; Match(LPAREN);
				State = 107; logical_expression(0);
				State = 108; Match(RPAREN);
				}
				break;
			case 6:
				{
				State = 110; rvalue();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 127;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 125;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						State = 113;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 114; Match(AND);
						State = 115; logical_expression(11);
						}
						break;
					case 2:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						State = 116;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 117; Match(OR);
						State = 118; logical_expression(10);
						}
						break;
					case 3:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						State = 119;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 120; Match(NAND);
						State = 121; logical_expression(9);
						}
						break;
					case 4:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						State = 122;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 123; Match(XOR);
						State = 124; logical_expression(8);
						}
						break;
					}
					} 
				}
				State = 129;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Negative_expressionContext : ParserRuleContext {
		public ITerminalNode BANG() { return GetToken(LogstashconfigParser.BANG, 0); }
		public ITerminalNode LPAREN() { return GetToken(LogstashconfigParser.LPAREN, 0); }
		public Logical_expressionContext logical_expression() {
			return GetRuleContext<Logical_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LogstashconfigParser.RPAREN, 0); }
		public Negative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterNegative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitNegative_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Negative_expressionContext negative_expression() {
		Negative_expressionContext _localctx = new Negative_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_negative_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(BANG);
			State = 131; Match(LPAREN);
			State = 132; logical_expression(0);
			State = 133; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compare_expressionContext : ParserRuleContext {
		public RvalueContext[] rvalue() {
			return GetRuleContexts<RvalueContext>();
		}
		public RvalueContext rvalue(int i) {
			return GetRuleContext<RvalueContext>(i);
		}
		public ITerminalNode GT() { return GetToken(LogstashconfigParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(LogstashconfigParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(LogstashconfigParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(LogstashconfigParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(LogstashconfigParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(LogstashconfigParser.NEQ, 0); }
		public Compare_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterCompare_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitCompare_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compare_expressionContext compare_expression() {
		Compare_expressionContext _localctx = new Compare_expressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_compare_expression);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 135; rvalue();
				State = 136; Match(GT);
				State = 137; rvalue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; rvalue();
				State = 140; Match(GE);
				State = 141; rvalue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 143; rvalue();
				State = 144; Match(LT);
				State = 145; rvalue();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 147; rvalue();
				State = 148; Match(LE);
				State = 149; rvalue();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 151; rvalue();
				State = 152; Match(EQ);
				State = 153; rvalue();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 155; rvalue();
				State = 156; Match(NEQ);
				State = 157; rvalue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_expressionContext : ParserRuleContext {
		public RvalueContext[] rvalue() {
			return GetRuleContexts<RvalueContext>();
		}
		public RvalueContext rvalue(int i) {
			return GetRuleContext<RvalueContext>(i);
		}
		public ITerminalNode IN() { return GetToken(LogstashconfigParser.IN, 0); }
		public ITerminalNode NOT() { return GetToken(LogstashconfigParser.NOT, 0); }
		public In_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterIn_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitIn_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_expressionContext in_expression() {
		In_expressionContext _localctx = new In_expressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_in_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; rvalue();
			State = 163;
			_la = TokenStream.La(1);
			if (_la==NOT) {
				{
				State = 162; Match(NOT);
				}
			}

			State = 165; Match(IN);
			State = 166; rvalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_expressionContext : ParserRuleContext {
		public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		public ITerminalNode MATCH() { return GetToken(LogstashconfigParser.MATCH, 0); }
		public ITerminalNode NOT_MATCH() { return GetToken(LogstashconfigParser.NOT_MATCH, 0); }
		public ITerminalNode STRING() { return GetToken(LogstashconfigParser.STRING, 0); }
		public ITerminalNode REGEX() { return GetToken(LogstashconfigParser.REGEX, 0); }
		public Match_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterMatch_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitMatch_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_expressionContext match_expression() {
		Match_expressionContext _localctx = new Match_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_match_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; rvalue();
			State = 169;
			_la = TokenStream.La(1);
			if ( !(_la==MATCH || _la==NOT_MATCH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 170;
			_la = TokenStream.La(1);
			if ( !(_la==STRING || _la==REGEX) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvalueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(LogstashconfigParser.STRING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(LogstashconfigParser.DECIMAL, 0); }
		public FieldrefContext fieldref() {
			return GetRuleContext<FieldrefContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public RvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterRvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitRvalue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RvalueContext rvalue() {
		RvalueContext _localctx = new RvalueContext(Context, State);
		EnterRule(_localctx, 26, RULE_rvalue);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; Match(DECIMAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174; fieldref();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 175; array();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldrefContext : ParserRuleContext {
		public Fieldref_elementContext[] fieldref_element() {
			return GetRuleContexts<Fieldref_elementContext>();
		}
		public Fieldref_elementContext fieldref_element(int i) {
			return GetRuleContext<Fieldref_elementContext>(i);
		}
		public FieldrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldref; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterFieldref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitFieldref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldrefContext fieldref() {
		FieldrefContext _localctx = new FieldrefContext(Context, State);
		EnterRule(_localctx, 28, RULE_fieldref);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 178; fieldref_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fieldref_elementContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(LogstashconfigParser.LBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LogstashconfigParser.IDENTIFIER, 0); }
		public ITerminalNode RBRACKET() { return GetToken(LogstashconfigParser.RBRACKET, 0); }
		public Fieldref_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldref_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterFieldref_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitFieldref_element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldref_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fieldref_elementContext fieldref_element() {
		Fieldref_elementContext _localctx = new Fieldref_elementContext(Context, State);
		EnterRule(_localctx, 30, RULE_fieldref_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(LBRACKET);
			State = 184; Match(IDENTIFIER);
			State = 185; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(LogstashconfigParser.LBRACKET, 0); }
		public Array_elementContext[] array_element() {
			return GetRuleContexts<Array_elementContext>();
		}
		public Array_elementContext array_element(int i) {
			return GetRuleContext<Array_elementContext>(i);
		}
		public ITerminalNode RBRACKET() { return GetToken(LogstashconfigParser.RBRACKET, 0); }
		public ITerminalNode[] COMA() { return GetTokens(LogstashconfigParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(LogstashconfigParser.COMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 32, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(LBRACKET);
			State = 188; array_element();
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMA) {
				{
				{
				State = 189; Match(COMA);
				State = 190; array_element();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 196; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_elementContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LogstashconfigParser.IDENTIFIER, 0); }
		public ITerminalNode STRING() { return GetToken(LogstashconfigParser.STRING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(LogstashconfigParser.DECIMAL, 0); }
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public HashContext hash() {
			return GetRuleContext<HashContext>(0);
		}
		public Array_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterArray_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitArray_element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_elementContext array_element() {
		Array_elementContext _localctx = new Array_elementContext(Context, State);
		EnterRule(_localctx, 34, RULE_array_element);
		try {
			State = 203;
			switch (TokenStream.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; Match(IDENTIFIER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; Match(STRING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 200; Match(DECIMAL);
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 201; array();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 202; hash();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(LogstashconfigParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(LogstashconfigParser.RBRACE, 0); }
		public Hash_elementContext[] hash_element() {
			return GetRuleContexts<Hash_elementContext>();
		}
		public Hash_elementContext hash_element(int i) {
			return GetRuleContext<Hash_elementContext>(i);
		}
		public HashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterHash(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitHash(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HashContext hash() {
		HashContext _localctx = new HashContext(Context, State);
		EnterRule(_localctx, 36, RULE_hash);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(LBRACE);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << DECIMAL) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 206; hash_element();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 212; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_elementContext : ParserRuleContext {
		public ITerminalNode HASHROCKET() { return GetToken(LogstashconfigParser.HASHROCKET, 0); }
		public Plugin_attribute_valueContext plugin_attribute_value() {
			return GetRuleContext<Plugin_attribute_valueContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(LogstashconfigParser.DECIMAL, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LogstashconfigParser.IDENTIFIER, 0); }
		public ITerminalNode STRING() { return GetToken(LogstashconfigParser.STRING, 0); }
		public Hash_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.EnterHash_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILogstashconfigListener typedListener = listener as ILogstashconfigListener;
			if (typedListener != null) typedListener.ExitHash_element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogstashconfigVisitor<TResult> typedVisitor = visitor as ILogstashconfigVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hash_elementContext hash_element() {
		Hash_elementContext _localctx = new Hash_elementContext(Context, State);
		EnterRule(_localctx, 38, RULE_hash_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << DECIMAL) | (1L << IDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 215; Match(HASHROCKET);
			State = 216; plugin_attribute_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return logical_expression_sempred((Logical_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logical_expression_sempred(Logical_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3$\xDD");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x3\x2\x6\x2,\n\x2\r\x2");
		sb.Append("\xE\x2-\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4");
		sb.Append("\x38\n\x4\f\x4\xE\x4;\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x6\x3\x6\a\x6\x44\n\x6\f\x6\xE\x6G\v\x6\x3\x6\x3\x6\x3\a\x3");
		sb.Append("\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bU\n\b\x3\t\x3");
		sb.Append("\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t_\n\t\f\t\xE\t\x62\v\t\x3");
		sb.Append("\t\x3\t\x5\t\x66\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n");
		sb.Append("\x3\n\x3\n\x5\nr\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n");
		sb.Append("\x3\n\x3\n\x3\n\x3\n\a\n\x80\n\n\f\n\xE\n\x83\v\n\x3\v\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x5\f\xA2\n\f\x3\r\x3\r\x5\r\xA6\n\r\x3\r\x3");
		sb.Append("\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF");
		sb.Append("\xB3\n\xF\x3\x10\x6\x10\xB6\n\x10\r\x10\xE\x10\xB7\x3\x11\x3");
		sb.Append("\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\xC2\n\x12");
		sb.Append("\f\x12\xE\x12\xC5\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3");
		sb.Append("\x13\x3\x13\x5\x13\xCE\n\x13\x3\x14\x3\x14\a\x14\xD2\n\x14\f");
		sb.Append("\x14\xE\x14\xD5\v\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3");
		sb.Append("\x15\x3\x15\x2\x3\x12\x16\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16");
		sb.Append("\x18\x1A\x1C\x1E \"$&(\x2\x6\x3\x2\x3\x5\x3\x2\x17\x18\x3\x2");
		sb.Append("\x1F \x4\x2\x1F\x1F!\"\xEC\x2+\x3\x2\x2\x2\x4\x31\x3\x2\x2\x2");
		sb.Append("\x6\x34\x3\x2\x2\x2\b>\x3\x2\x2\x2\n\x41\x3\x2\x2\x2\fJ\x3\x2");
		sb.Append("\x2\x2\xET\x3\x2\x2\x2\x10V\x3\x2\x2\x2\x12q\x3\x2\x2\x2\x14");
		sb.Append("\x84\x3\x2\x2\x2\x16\xA1\x3\x2\x2\x2\x18\xA3\x3\x2\x2\x2\x1A");
		sb.Append("\xAA\x3\x2\x2\x2\x1C\xB2\x3\x2\x2\x2\x1E\xB5\x3\x2\x2\x2 \xB9");
		sb.Append("\x3\x2\x2\x2\"\xBD\x3\x2\x2\x2$\xCD\x3\x2\x2\x2&\xCF\x3\x2\x2");
		sb.Append("\x2(\xD8\x3\x2\x2\x2*,\x5\x4\x3\x2+*\x3\x2\x2\x2,-\x3\x2\x2");
		sb.Append("\x2-+\x3\x2\x2\x2-.\x3\x2\x2\x2./\x3\x2\x2\x2/\x30\a\x2\x2\x3");
		sb.Append("\x30\x3\x3\x2\x2\x2\x31\x32\t\x2\x2\x2\x32\x33\x5\x6\x4\x2\x33");
		sb.Append("\x5\x3\x2\x2\x2\x34\x39\a\x6\x2\x2\x35\x38\x5\b\x5\x2\x36\x38");
		sb.Append("\x5\x10\t\x2\x37\x35\x3\x2\x2\x2\x37\x36\x3\x2\x2\x2\x38;\x3");
		sb.Append("\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:<\x3\x2\x2\x2");
		sb.Append(";\x39\x3\x2\x2\x2<=\a\a\x2\x2=\a\x3\x2\x2\x2>?\a\"\x2\x2?@\x5");
		sb.Append("\n\x6\x2@\t\x3\x2\x2\x2\x41\x45\a\x6\x2\x2\x42\x44\x5\f\a\x2");
		sb.Append("\x43\x42\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45");
		sb.Append("\x46\x3\x2\x2\x2\x46H\x3\x2\x2\x2G\x45\x3\x2\x2\x2HI\a\a\x2");
		sb.Append("\x2I\v\x3\x2\x2\x2JK\a\"\x2\x2KL\a\f\x2\x2LM\x5\xE\b\x2M\r\x3");
		sb.Append("\x2\x2\x2NU\x5\b\x5\x2OU\a\"\x2\x2PU\a\x1F\x2\x2QU\a!\x2\x2");
		sb.Append("RU\x5\"\x12\x2SU\x5&\x14\x2TN\x3\x2\x2\x2TO\x3\x2\x2\x2TP\x3");
		sb.Append("\x2\x2\x2TQ\x3\x2\x2\x2TR\x3\x2\x2\x2TS\x3\x2\x2\x2U\xF\x3\x2");
		sb.Append("\x2\x2VW\a\x1D\x2\x2WX\x5\x12\n\x2X`\x5\x6\x4\x2YZ\a\x1E\x2");
		sb.Append("\x2Z[\a\x1D\x2\x2[\\\x5\x12\n\x2\\]\x5\x6\x4\x2]_\x3\x2\x2\x2");
		sb.Append("^Y\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2");
		sb.Append("\x2\x61\x65\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x64\a\x1E\x2\x2");
		sb.Append("\x64\x66\x5\x6\x4\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2");
		sb.Append("\x66\x11\x3\x2\x2\x2gh\b\n\x1\x2hr\x5\x16\f\x2ir\x5\x18\r\x2");
		sb.Append("jr\x5\x1A\xE\x2kr\x5\x14\v\x2lm\a\b\x2\x2mn\x5\x12\n\x2no\a");
		sb.Append("\t\x2\x2or\x3\x2\x2\x2pr\x5\x1C\xF\x2qg\x3\x2\x2\x2qi\x3\x2");
		sb.Append("\x2\x2qj\x3\x2\x2\x2qk\x3\x2\x2\x2ql\x3\x2\x2\x2qp\x3\x2\x2");
		sb.Append("\x2r\x81\x3\x2\x2\x2st\f\f\x2\x2tu\a\x19\x2\x2u\x80\x5\x12\n");
		sb.Append("\rvw\f\v\x2\x2wx\a\x1A\x2\x2x\x80\x5\x12\n\fyz\f\n\x2\x2z{\a");
		sb.Append("\x1C\x2\x2{\x80\x5\x12\n\v|}\f\t\x2\x2}~\a\x1B\x2\x2~\x80\x5");
		sb.Append("\x12\n\n\x7Fs\x3\x2\x2\x2\x7Fv\x3\x2\x2\x2\x7Fy\x3\x2\x2\x2");
		sb.Append("\x7F|\x3\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x81");
		sb.Append("\x82\x3\x2\x2\x2\x82\x13\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84");
		sb.Append("\x85\a\x13\x2\x2\x85\x86\a\b\x2\x2\x86\x87\x5\x12\n\x2\x87\x88");
		sb.Append("\a\t\x2\x2\x88\x15\x3\x2\x2\x2\x89\x8A\x5\x1C\xF\x2\x8A\x8B");
		sb.Append("\a\r\x2\x2\x8B\x8C\x5\x1C\xF\x2\x8C\xA2\x3\x2\x2\x2\x8D\x8E");
		sb.Append("\x5\x1C\xF\x2\x8E\x8F\a\xE\x2\x2\x8F\x90\x5\x1C\xF\x2\x90\xA2");
		sb.Append("\x3\x2\x2\x2\x91\x92\x5\x1C\xF\x2\x92\x93\a\xF\x2\x2\x93\x94");
		sb.Append("\x5\x1C\xF\x2\x94\xA2\x3\x2\x2\x2\x95\x96\x5\x1C\xF\x2\x96\x97");
		sb.Append("\a\x10\x2\x2\x97\x98\x5\x1C\xF\x2\x98\xA2\x3\x2\x2\x2\x99\x9A");
		sb.Append("\x5\x1C\xF\x2\x9A\x9B\a\x11\x2\x2\x9B\x9C\x5\x1C\xF\x2\x9C\xA2");
		sb.Append("\x3\x2\x2\x2\x9D\x9E\x5\x1C\xF\x2\x9E\x9F\a\x12\x2\x2\x9F\xA0");
		sb.Append("\x5\x1C\xF\x2\xA0\xA2\x3\x2\x2\x2\xA1\x89\x3\x2\x2\x2\xA1\x8D");
		sb.Append("\x3\x2\x2\x2\xA1\x91\x3\x2\x2\x2\xA1\x95\x3\x2\x2\x2\xA1\x99");
		sb.Append("\x3\x2\x2\x2\xA1\x9D\x3\x2\x2\x2\xA2\x17\x3\x2\x2\x2\xA3\xA5");
		sb.Append("\x5\x1C\xF\x2\xA4\xA6\a\x16\x2\x2\xA5\xA4\x3\x2\x2\x2\xA5\xA6");
		sb.Append("\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA8\a\x15\x2\x2\xA8\xA9");
		sb.Append("\x5\x1C\xF\x2\xA9\x19\x3\x2\x2\x2\xAA\xAB\x5\x1C\xF\x2\xAB\xAC");
		sb.Append("\t\x3\x2\x2\xAC\xAD\t\x4\x2\x2\xAD\x1B\x3\x2\x2\x2\xAE\xB3\a");
		sb.Append("\x1F\x2\x2\xAF\xB3\a!\x2\x2\xB0\xB3\x5\x1E\x10\x2\xB1\xB3\x5");
		sb.Append("\"\x12\x2\xB2\xAE\x3\x2\x2\x2\xB2\xAF\x3\x2\x2\x2\xB2\xB0\x3");
		sb.Append("\x2\x2\x2\xB2\xB1\x3\x2\x2\x2\xB3\x1D\x3\x2\x2\x2\xB4\xB6\x5");
		sb.Append(" \x11\x2\xB5\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB5\x3");
		sb.Append("\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\x1F\x3\x2\x2\x2\xB9\xBA\a");
		sb.Append("\n\x2\x2\xBA\xBB\a\"\x2\x2\xBB\xBC\a\v\x2\x2\xBC!\x3\x2\x2\x2");
		sb.Append("\xBD\xBE\a\n\x2\x2\xBE\xC3\x5$\x13\x2\xBF\xC0\a\x14\x2\x2\xC0");
		sb.Append("\xC2\x5$\x13\x2\xC1\xBF\x3\x2\x2\x2\xC2\xC5\x3\x2\x2\x2\xC3");
		sb.Append("\xC1\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC6\x3\x2\x2\x2\xC5");
		sb.Append("\xC3\x3\x2\x2\x2\xC6\xC7\a\v\x2\x2\xC7#\x3\x2\x2\x2\xC8\xCE");
		sb.Append("\a\"\x2\x2\xC9\xCE\a\x1F\x2\x2\xCA\xCE\a!\x2\x2\xCB\xCE\x5\"");
		sb.Append("\x12\x2\xCC\xCE\x5&\x14\x2\xCD\xC8\x3\x2\x2\x2\xCD\xC9\x3\x2");
		sb.Append("\x2\x2\xCD\xCA\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCC\x3\x2");
		sb.Append("\x2\x2\xCE%\x3\x2\x2\x2\xCF\xD3\a\x6\x2\x2\xD0\xD2\x5(\x15\x2");
		sb.Append("\xD1\xD0\x3\x2\x2\x2\xD2\xD5\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2");
		sb.Append("\xD3\xD4\x3\x2\x2\x2\xD4\xD6\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2");
		sb.Append("\xD6\xD7\a\a\x2\x2\xD7\'\x3\x2\x2\x2\xD8\xD9\t\x5\x2\x2\xD9");
		sb.Append("\xDA\a\f\x2\x2\xDA\xDB\x5\xE\b\x2\xDB)\x3\x2\x2\x2\x13-\x37");
		sb.Append("\x39\x45T`\x65q\x7F\x81\xA1\xA5\xB2\xB7\xC3\xCD\xD3");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
