//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Logstashconfig.g4 by ANTLR 4.5.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.2")]
[System.CLSCompliant(false)]
public partial class LogstashconfigLexer : Lexer {
	public const int
		INPUT=1, FILTER=2, OUTPUT=3, LBRACE=4, RBRACE=5, LPAREN=6, RPAREN=7, LBRACKET=8, 
		RBRACKET=9, HASHROCKET=10, GT=11, GE=12, LT=13, LE=14, EQ=15, NEQ=16, 
		BANG=17, COMA=18, IN=19, NOT=20, MATCH=21, NOT_MATCH=22, AND=23, OR=24, 
		XOR=25, NAND=26, IF=27, ELSE=28, STRING=29, REGEX=30, DECIMAL=31, IDENTIFIER=32, 
		WS=33, COMMENT=34;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INPUT", "FILTER", "OUTPUT", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACKET", 
		"RBRACKET", "HASHROCKET", "GT", "GE", "LT", "LE", "EQ", "NEQ", "BANG", 
		"COMA", "IN", "NOT", "MATCH", "NOT_MATCH", "AND", "OR", "XOR", "NAND", 
		"IF", "ELSE", "NL", "HASH", "FSLASH", "BSLASH", "DQUOTE", "SQUOTE", "DQ_STRING_ESC", 
		"SQ_STRING_ESC", "DQ_STRING", "SQ_STRING", "STRING", "REGEX_ESC", "REGEX", 
		"DECIMAL", "IDENTIFIER", "WS", "COMMENT"
	};


	public LogstashconfigLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'input'", "'filter'", "'output'", "'{'", "'}'", "'('", "')'", "'['", 
		"']'", "'=>'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'!'", "','", 
		"'in'", "'not'", "'=~'", "'!~'", "'and'", "'or'", "'xor'", "'nand'", "'if'", 
		"'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INPUT", "FILTER", "OUTPUT", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
		"LBRACKET", "RBRACKET", "HASHROCKET", "GT", "GE", "LT", "LE", "EQ", "NEQ", 
		"BANG", "COMA", "IN", "NOT", "MATCH", "NOT_MATCH", "AND", "OR", "XOR", 
		"NAND", "IF", "ELSE", "STRING", "REGEX", "DECIMAL", "IDENTIFIER", "WS", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Logstashconfig.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2$\x11A");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x3\x2\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6");
		sb.Append("\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3");
		sb.Append("\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13");
		sb.Append("\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3");
		sb.Append("\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18");
		sb.Append("\x3\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D");
		sb.Append("\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3");
		sb.Append(" \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3%\x3%\x3%\x3&");
		sb.Append("\x3&\x3&\a&\xCF\n&\f&\xE&\xD2\v&\x3&\x3&\x3\'\x3\'\x3\'\a\'");
		sb.Append("\xD9\n\'\f\'\xE\'\xDC\v\'\x3\'\x3\'\x3(\x3(\x5(\xE2\n(\x3)\x3");
		sb.Append(")\x3)\x3*\x3*\x3*\a*\xEA\n*\f*\xE*\xED\v*\x3*\x3*\x3+\x5+\xF2");
		sb.Append("\n+\x3+\x6+\xF5\n+\r+\xE+\xF6\x3+\x3+\x6+\xFB\n+\r+\xE+\xFC");
		sb.Append("\x5+\xFF\n+\x3,\x3,\a,\x103\n,\f,\xE,\x106\v,\x3-\x6-\x109\n");
		sb.Append("-\r-\xE-\x10A\x3-\x3-\x3.\x3.\x6.\x111\n.\r.\xE.\x112\x3.\x3");
		sb.Append(".\x5.\x117\n.\x3.\x3.\x3\x112\x2/\x3\x3\x5\x4\a\x5\t\x6\v\a");
		sb.Append("\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F");
		sb.Append("\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19\x31\x1A\x33\x1B");
		sb.Append("\x35\x1C\x37\x1D\x39\x1E;\x2=\x2?\x2\x41\x2\x43\x2\x45\x2G\x2");
		sb.Append("I\x2K\x2M\x2O\x1FQ\x2S U!W\"Y#[$\x3\x2\v\n\x2$$\x31\x31^^\x64");
		sb.Append("\x64hhppttvv\n\x2))\x31\x31^^\x64\x64hhppttvv\x4\x2$$^^\x4\x2");
		sb.Append("))^^\a\x2\x43\x43HHJJNNUU\x3\x2\x32;\x5\x2\x43\\\x61\x61\x63");
		sb.Append("|\a\x2//\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xE\xF\"\"\x11D\x2");
		sb.Append("\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2");
		sb.Append("\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2");
		sb.Append("\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17");
		sb.Append("\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3");
		sb.Append("\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2");
		sb.Append("\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2");
		sb.Append("\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2");
		sb.Append("\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39");
		sb.Append("\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2");
		sb.Append("\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x3]\x3\x2\x2");
		sb.Append("\x2\x5\x63\x3\x2\x2\x2\aj\x3\x2\x2\x2\tq\x3\x2\x2\x2\vs\x3\x2");
		sb.Append("\x2\x2\ru\x3\x2\x2\x2\xFw\x3\x2\x2\x2\x11y\x3\x2\x2\x2\x13{");
		sb.Append("\x3\x2\x2\x2\x15}\x3\x2\x2\x2\x17\x80\x3\x2\x2\x2\x19\x82\x3");
		sb.Append("\x2\x2\x2\x1B\x85\x3\x2\x2\x2\x1D\x87\x3\x2\x2\x2\x1F\x8A\x3");
		sb.Append("\x2\x2\x2!\x8D\x3\x2\x2\x2#\x90\x3\x2\x2\x2%\x92\x3\x2\x2\x2");
		sb.Append("\'\x94\x3\x2\x2\x2)\x97\x3\x2\x2\x2+\x9B\x3\x2\x2\x2-\x9E\x3");
		sb.Append("\x2\x2\x2/\xA1\x3\x2\x2\x2\x31\xA5\x3\x2\x2\x2\x33\xA8\x3\x2");
		sb.Append("\x2\x2\x35\xAC\x3\x2\x2\x2\x37\xB1\x3\x2\x2\x2\x39\xB4\x3\x2");
		sb.Append("\x2\x2;\xB9\x3\x2\x2\x2=\xBB\x3\x2\x2\x2?\xBD\x3\x2\x2\x2\x41");
		sb.Append("\xBF\x3\x2\x2\x2\x43\xC1\x3\x2\x2\x2\x45\xC3\x3\x2\x2\x2G\xC5");
		sb.Append("\x3\x2\x2\x2I\xC8\x3\x2\x2\x2K\xCB\x3\x2\x2\x2M\xD5\x3\x2\x2");
		sb.Append("\x2O\xE1\x3\x2\x2\x2Q\xE3\x3\x2\x2\x2S\xE6\x3\x2\x2\x2U\xF1");
		sb.Append("\x3\x2\x2\x2W\x100\x3\x2\x2\x2Y\x108\x3\x2\x2\x2[\x10E\x3\x2");
		sb.Append("\x2\x2]^\ak\x2\x2^_\ap\x2\x2_`\ar\x2\x2`\x61\aw\x2\x2\x61\x62");
		sb.Append("\av\x2\x2\x62\x4\x3\x2\x2\x2\x63\x64\ah\x2\x2\x64\x65\ak\x2");
		sb.Append("\x2\x65\x66\an\x2\x2\x66g\av\x2\x2gh\ag\x2\x2hi\at\x2\x2i\x6");
		sb.Append("\x3\x2\x2\x2jk\aq\x2\x2kl\aw\x2\x2lm\av\x2\x2mn\ar\x2\x2no\a");
		sb.Append("w\x2\x2op\av\x2\x2p\b\x3\x2\x2\x2qr\a}\x2\x2r\n\x3\x2\x2\x2");
		sb.Append("st\a\x7F\x2\x2t\f\x3\x2\x2\x2uv\a*\x2\x2v\xE\x3\x2\x2\x2wx\a");
		sb.Append("+\x2\x2x\x10\x3\x2\x2\x2yz\a]\x2\x2z\x12\x3\x2\x2\x2{|\a_\x2");
		sb.Append("\x2|\x14\x3\x2\x2\x2}~\a?\x2\x2~\x7F\a@\x2\x2\x7F\x16\x3\x2");
		sb.Append("\x2\x2\x80\x81\a@\x2\x2\x81\x18\x3\x2\x2\x2\x82\x83\a@\x2\x2");
		sb.Append("\x83\x84\a?\x2\x2\x84\x1A\x3\x2\x2\x2\x85\x86\a>\x2\x2\x86\x1C");
		sb.Append("\x3\x2\x2\x2\x87\x88\a>\x2\x2\x88\x89\a?\x2\x2\x89\x1E\x3\x2");
		sb.Append("\x2\x2\x8A\x8B\a?\x2\x2\x8B\x8C\a?\x2\x2\x8C \x3\x2\x2\x2\x8D");
		sb.Append("\x8E\a#\x2\x2\x8E\x8F\a?\x2\x2\x8F\"\x3\x2\x2\x2\x90\x91\a#");
		sb.Append("\x2\x2\x91$\x3\x2\x2\x2\x92\x93\a.\x2\x2\x93&\x3\x2\x2\x2\x94");
		sb.Append("\x95\ak\x2\x2\x95\x96\ap\x2\x2\x96(\x3\x2\x2\x2\x97\x98\ap\x2");
		sb.Append("\x2\x98\x99\aq\x2\x2\x99\x9A\av\x2\x2\x9A*\x3\x2\x2\x2\x9B\x9C");
		sb.Append("\a?\x2\x2\x9C\x9D\a\x80\x2\x2\x9D,\x3\x2\x2\x2\x9E\x9F\a#\x2");
		sb.Append("\x2\x9F\xA0\a\x80\x2\x2\xA0.\x3\x2\x2\x2\xA1\xA2\a\x63\x2\x2");
		sb.Append("\xA2\xA3\ap\x2\x2\xA3\xA4\a\x66\x2\x2\xA4\x30\x3\x2\x2\x2\xA5");
		sb.Append("\xA6\aq\x2\x2\xA6\xA7\at\x2\x2\xA7\x32\x3\x2\x2\x2\xA8\xA9\a");
		sb.Append("z\x2\x2\xA9\xAA\aq\x2\x2\xAA\xAB\at\x2\x2\xAB\x34\x3\x2\x2\x2");
		sb.Append("\xAC\xAD\ap\x2\x2\xAD\xAE\a\x63\x2\x2\xAE\xAF\ap\x2\x2\xAF\xB0");
		sb.Append("\a\x66\x2\x2\xB0\x36\x3\x2\x2\x2\xB1\xB2\ak\x2\x2\xB2\xB3\a");
		sb.Append("h\x2\x2\xB3\x38\x3\x2\x2\x2\xB4\xB5\ag\x2\x2\xB5\xB6\an\x2\x2");
		sb.Append("\xB6\xB7\au\x2\x2\xB7\xB8\ag\x2\x2\xB8:\x3\x2\x2\x2\xB9\xBA");
		sb.Append("\a\f\x2\x2\xBA<\x3\x2\x2\x2\xBB\xBC\a%\x2\x2\xBC>\x3\x2\x2\x2");
		sb.Append("\xBD\xBE\a\x31\x2\x2\xBE@\x3\x2\x2\x2\xBF\xC0\a^\x2\x2\xC0\x42");
		sb.Append("\x3\x2\x2\x2\xC1\xC2\a$\x2\x2\xC2\x44\x3\x2\x2\x2\xC3\xC4\a");
		sb.Append(")\x2\x2\xC4\x46\x3\x2\x2\x2\xC5\xC6\x5\x41!\x2\xC6\xC7\t\x2");
		sb.Append("\x2\x2\xC7H\x3\x2\x2\x2\xC8\xC9\x5\x41!\x2\xC9\xCA\t\x3\x2\x2");
		sb.Append("\xCAJ\x3\x2\x2\x2\xCB\xD0\x5\x43\"\x2\xCC\xCF\x5G$\x2\xCD\xCF");
		sb.Append("\n\x4\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCD\x3\x2\x2\x2\xCF\xD2");
		sb.Append("\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD3");
		sb.Append("\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3\xD4\x5\x43\"\x2\xD4L\x3");
		sb.Append("\x2\x2\x2\xD5\xDA\x5\x45#\x2\xD6\xD9\x5I%\x2\xD7\xD9\n\x5\x2");
		sb.Append("\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD7\x3\x2\x2\x2\xD9\xDC\x3\x2\x2");
		sb.Append("\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDD\x3\x2\x2");
		sb.Append("\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDE\x5\x45#\x2\xDEN\x3\x2\x2\x2");
		sb.Append("\xDF\xE2\x5K&\x2\xE0\xE2\x5M\'\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE0");
		sb.Append("\x3\x2\x2\x2\xE2P\x3\x2\x2\x2\xE3\xE4\x5\x41!\x2\xE4\xE5\x5");
		sb.Append("? \x2\xE5R\x3\x2\x2\x2\xE6\xEB\x5? \x2\xE7\xEA\x5Q)\x2\xE8\xEA");
		sb.Append("\n\x6\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xE8\x3\x2\x2\x2\xEA\xED");
		sb.Append("\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xEE");
		sb.Append("\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xEE\xEF\x5? \x2\xEFT\x3\x2");
		sb.Append("\x2\x2\xF0\xF2\a/\x2\x2\xF1\xF0\x3\x2\x2\x2\xF1\xF2\x3\x2\x2");
		sb.Append("\x2\xF2\xF4\x3\x2\x2\x2\xF3\xF5\t\a\x2\x2\xF4\xF3\x3\x2\x2\x2");
		sb.Append("\xF5\xF6\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2");
		sb.Append("\xF7\xFE\x3\x2\x2\x2\xF8\xFA\a\x30\x2\x2\xF9\xFB\t\a\x2\x2\xFA");
		sb.Append("\xF9\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFA\x3\x2\x2\x2\xFC");
		sb.Append("\xFD\x3\x2\x2\x2\xFD\xFF\x3\x2\x2\x2\xFE\xF8\x3\x2\x2\x2\xFE");
		sb.Append("\xFF\x3\x2\x2\x2\xFFV\x3\x2\x2\x2\x100\x104\t\b\x2\x2\x101\x103");
		sb.Append("\t\t\x2\x2\x102\x101\x3\x2\x2\x2\x103\x106\x3\x2\x2\x2\x104");
		sb.Append("\x102\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105X\x3\x2\x2\x2\x106");
		sb.Append("\x104\x3\x2\x2\x2\x107\x109\t\n\x2\x2\x108\x107\x3\x2\x2\x2");
		sb.Append("\x109\x10A\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3\x2");
		sb.Append("\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D\b-\x2\x2\x10DZ\x3\x2");
		sb.Append("\x2\x2\x10E\x110\x5=\x1F\x2\x10F\x111\v\x2\x2\x2\x110\x10F\x3");
		sb.Append("\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x112\x110");
		sb.Append("\x3\x2\x2\x2\x113\x116\x3\x2\x2\x2\x114\x117\x5;\x1E\x2\x115");
		sb.Append("\x117\a\x2\x2\x3\x116\x114\x3\x2\x2\x2\x116\x115\x3\x2\x2\x2");
		sb.Append("\x117\x118\x3\x2\x2\x2\x118\x119\b.\x2\x2\x119\\\x3\x2\x2\x2");
		sb.Append("\x12\x2\xCE\xD0\xD8\xDA\xE1\xE9\xEB\xF1\xF6\xFC\xFE\x104\x10A");
		sb.Append("\x112\x116\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
