//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Logstashconfig.g4 by ANTLR 4.5.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


  

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.2")]
[System.CLSCompliant(false)]
public partial class LogstashconfigLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, NEWLINE=34, WS=35, QUOTED_LITERAL=36, ID=37, DIGIT=38, 
		INT=39;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"NEWLINE", "WS", "QUOTED_LITERAL", "ID", "DIGIT", "INT"
	};


	public LogstashconfigLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'{'", "'}'", "'input'", "'filter'", "'output'", "'=>'", 
		"'if'", "'else'", "'''", "'-'", "'.'", "'('", "')'", "'['", "','", "']'", 
		"'and'", "'or'", "'xor'", "'nand'", "'!'", "'in'", "'not'", "'/'", "'=='", 
		"'!='", "'<='", "'>='", "'<'", "'>'", "'=~'", "'!~'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "NEWLINE", 
		"WS", "QUOTED_LITERAL", "ID", "DIGIT", "INT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Logstashconfig.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2)\xE9");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a");
		sb.Append("\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t");
		sb.Append("\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE");
		sb.Append("\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12");
		sb.Append("\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3");
		sb.Append("\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17");
		sb.Append("\x3\x17\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3");
		sb.Append("\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D");
		sb.Append("\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3");
		sb.Append("!\x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3$\x3%\x3%\x3");
		sb.Append("%\x3%\x3%\x3%\x3%\x3%\a%\xC6\n%\f%\xE%\xC9\v%\x3%\x3%\x3%\x3");
		sb.Append("%\x3%\x3%\x3%\x3%\x3%\a%\xD4\n%\f%\xE%\xD7\v%\x3%\x5%\xDA\n");
		sb.Append("%\x3&\x3&\a&\xDE\n&\f&\xE&\xE1\v&\x3\'\x3\'\x3(\x6(\xE6\n(\r");
		sb.Append("(\xE(\xE7\x2\x2)\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13");
		sb.Append("\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14");
		sb.Append("\'\x15)\x16+\x17-\x18/\x19\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39");
		sb.Append("\x1E;\x1F= ?!\x41\"\x43#\x45$G%I&K\'M(O)\x3\x2\t\x4\x2\f\f\xF");
		sb.Append("\xF\x5\x2\v\f\xF\xF\"\"\x3\x2))\x3\x2$$\x6\x2&&\x43\\\x61\x61");
		sb.Append("\x63|\a\x2&&\x32;\x43\\\x61\x61\x63|\x3\x2\x32;\xF3\x2\x3\x3");
		sb.Append("\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2");
		sb.Append("\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11");
		sb.Append("\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3");
		sb.Append("\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2");
		sb.Append("\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2");
		sb.Append("%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2");
		sb.Append("\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33");
		sb.Append("\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3");
		sb.Append("\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2");
		sb.Append("\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3");
		sb.Append("\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2");
		sb.Append("O\x3\x2\x2\x2\x3Q\x3\x2\x2\x2\x5S\x3\x2\x2\x2\aU\x3\x2\x2\x2");
		sb.Append("\tW\x3\x2\x2\x2\v]\x3\x2\x2\x2\r\x64\x3\x2\x2\x2\xFk\x3\x2\x2");
		sb.Append("\x2\x11n\x3\x2\x2\x2\x13q\x3\x2\x2\x2\x15v\x3\x2\x2\x2\x17x");
		sb.Append("\x3\x2\x2\x2\x19z\x3\x2\x2\x2\x1B|\x3\x2\x2\x2\x1D~\x3\x2\x2");
		sb.Append("\x2\x1F\x80\x3\x2\x2\x2!\x82\x3\x2\x2\x2#\x84\x3\x2\x2\x2%\x86");
		sb.Append("\x3\x2\x2\x2\'\x8A\x3\x2\x2\x2)\x8D\x3\x2\x2\x2+\x91\x3\x2\x2");
		sb.Append("\x2-\x96\x3\x2\x2\x2/\x98\x3\x2\x2\x2\x31\x9B\x3\x2\x2\x2\x33");
		sb.Append("\x9F\x3\x2\x2\x2\x35\xA1\x3\x2\x2\x2\x37\xA4\x3\x2\x2\x2\x39");
		sb.Append("\xA7\x3\x2\x2\x2;\xAA\x3\x2\x2\x2=\xAD\x3\x2\x2\x2?\xAF\x3\x2");
		sb.Append("\x2\x2\x41\xB1\x3\x2\x2\x2\x43\xB4\x3\x2\x2\x2\x45\xB7\x3\x2");
		sb.Append("\x2\x2G\xB9\x3\x2\x2\x2I\xD9\x3\x2\x2\x2K\xDB\x3\x2\x2\x2M\xE2");
		sb.Append("\x3\x2\x2\x2O\xE5\x3\x2\x2\x2QR\a%\x2\x2R\x4\x3\x2\x2\x2ST\a");
		sb.Append("}\x2\x2T\x6\x3\x2\x2\x2UV\a\x7F\x2\x2V\b\x3\x2\x2\x2WX\ak\x2");
		sb.Append("\x2XY\ap\x2\x2YZ\ar\x2\x2Z[\aw\x2\x2[\\\av\x2\x2\\\n\x3\x2\x2");
		sb.Append("\x2]^\ah\x2\x2^_\ak\x2\x2_`\an\x2\x2`\x61\av\x2\x2\x61\x62\a");
		sb.Append("g\x2\x2\x62\x63\at\x2\x2\x63\f\x3\x2\x2\x2\x64\x65\aq\x2\x2");
		sb.Append("\x65\x66\aw\x2\x2\x66g\av\x2\x2gh\ar\x2\x2hi\aw\x2\x2ij\av\x2");
		sb.Append("\x2j\xE\x3\x2\x2\x2kl\a?\x2\x2lm\a@\x2\x2m\x10\x3\x2\x2\x2n");
		sb.Append("o\ak\x2\x2op\ah\x2\x2p\x12\x3\x2\x2\x2qr\ag\x2\x2rs\an\x2\x2");
		sb.Append("st\au\x2\x2tu\ag\x2\x2u\x14\x3\x2\x2\x2vw\a)\x2\x2w\x16\x3\x2");
		sb.Append("\x2\x2xy\a/\x2\x2y\x18\x3\x2\x2\x2z{\a\x30\x2\x2{\x1A\x3\x2");
		sb.Append("\x2\x2|}\a*\x2\x2}\x1C\x3\x2\x2\x2~\x7F\a+\x2\x2\x7F\x1E\x3");
		sb.Append("\x2\x2\x2\x80\x81\a]\x2\x2\x81 \x3\x2\x2\x2\x82\x83\a.\x2\x2");
		sb.Append("\x83\"\x3\x2\x2\x2\x84\x85\a_\x2\x2\x85$\x3\x2\x2\x2\x86\x87");
		sb.Append("\a\x63\x2\x2\x87\x88\ap\x2\x2\x88\x89\a\x66\x2\x2\x89&\x3\x2");
		sb.Append("\x2\x2\x8A\x8B\aq\x2\x2\x8B\x8C\at\x2\x2\x8C(\x3\x2\x2\x2\x8D");
		sb.Append("\x8E\az\x2\x2\x8E\x8F\aq\x2\x2\x8F\x90\at\x2\x2\x90*\x3\x2\x2");
		sb.Append("\x2\x91\x92\ap\x2\x2\x92\x93\a\x63\x2\x2\x93\x94\ap\x2\x2\x94");
		sb.Append("\x95\a\x66\x2\x2\x95,\x3\x2\x2\x2\x96\x97\a#\x2\x2\x97.\x3\x2");
		sb.Append("\x2\x2\x98\x99\ak\x2\x2\x99\x9A\ap\x2\x2\x9A\x30\x3\x2\x2\x2");
		sb.Append("\x9B\x9C\ap\x2\x2\x9C\x9D\aq\x2\x2\x9D\x9E\av\x2\x2\x9E\x32");
		sb.Append("\x3\x2\x2\x2\x9F\xA0\a\x31\x2\x2\xA0\x34\x3\x2\x2\x2\xA1\xA2");
		sb.Append("\a?\x2\x2\xA2\xA3\a?\x2\x2\xA3\x36\x3\x2\x2\x2\xA4\xA5\a#\x2");
		sb.Append("\x2\xA5\xA6\a?\x2\x2\xA6\x38\x3\x2\x2\x2\xA7\xA8\a>\x2\x2\xA8");
		sb.Append("\xA9\a?\x2\x2\xA9:\x3\x2\x2\x2\xAA\xAB\a@\x2\x2\xAB\xAC\a?\x2");
		sb.Append("\x2\xAC<\x3\x2\x2\x2\xAD\xAE\a>\x2\x2\xAE>\x3\x2\x2\x2\xAF\xB0");
		sb.Append("\a@\x2\x2\xB0@\x3\x2\x2\x2\xB1\xB2\a?\x2\x2\xB2\xB3\a\x80\x2");
		sb.Append("\x2\xB3\x42\x3\x2\x2\x2\xB4\xB5\a#\x2\x2\xB5\xB6\a\x80\x2\x2");
		sb.Append("\xB6\x44\x3\x2\x2\x2\xB7\xB8\t\x2\x2\x2\xB8\x46\x3\x2\x2\x2");
		sb.Append("\xB9\xBA\t\x3\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\b$\x2\x2\xBC");
		sb.Append("H\x3\x2\x2\x2\xBD\xC7\a)\x2\x2\xBE\xBF\a^\x2\x2\xBF\xC6\a^\x2");
		sb.Append("\x2\xC0\xC1\a)\x2\x2\xC1\xC6\a)\x2\x2\xC2\xC3\a^\x2\x2\xC3\xC6");
		sb.Append("\a)\x2\x2\xC4\xC6\n\x4\x2\x2\xC5\xBE\x3\x2\x2\x2\xC5\xC0\x3");
		sb.Append("\x2\x2\x2\xC5\xC2\x3\x2\x2\x2\xC5\xC4\x3\x2\x2\x2\xC6\xC9\x3");
		sb.Append("\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xCA\x3");
		sb.Append("\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xDA\a)\x2\x2\xCB\xD5\a$\x2");
		sb.Append("\x2\xCC\xCD\a^\x2\x2\xCD\xD4\a^\x2\x2\xCE\xCF\a$\x2\x2\xCF\xD4");
		sb.Append("\a$\x2\x2\xD0\xD1\a^\x2\x2\xD1\xD4\a$\x2\x2\xD2\xD4\n\x5\x2");
		sb.Append("\x2\xD3\xCC\x3\x2\x2\x2\xD3\xCE\x3\x2\x2\x2\xD3\xD0\x3\x2\x2");
		sb.Append("\x2\xD3\xD2\x3\x2\x2\x2\xD4\xD7\x3\x2\x2\x2\xD5\xD3\x3\x2\x2");
		sb.Append("\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD8\x3\x2\x2\x2\xD7\xD5\x3\x2\x2");
		sb.Append("\x2\xD8\xDA\a$\x2\x2\xD9\xBD\x3\x2\x2\x2\xD9\xCB\x3\x2\x2\x2");
		sb.Append("\xDAJ\x3\x2\x2\x2\xDB\xDF\t\x6\x2\x2\xDC\xDE\t\a\x2\x2\xDD\xDC");
		sb.Append("\x3\x2\x2\x2\xDE\xE1\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xDF\xE0");
		sb.Append("\x3\x2\x2\x2\xE0L\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE2\xE3\t");
		sb.Append("\b\x2\x2\xE3N\x3\x2\x2\x2\xE4\xE6\t\b\x2\x2\xE5\xE4\x3\x2\x2");
		sb.Append("\x2\xE6\xE7\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE8\x3\x2\x2");
		sb.Append("\x2\xE8P\x3\x2\x2\x2\n\x2\xC5\xC7\xD3\xD5\xD9\xDF\xE7\x3\b\x2");
		sb.Append("\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
